{"version":3,"file":"src/functions/list/handler.js","mappings":"gFAGA,MAAMA,EAAoB,IAAI,iBAAmB,CAAEC,OAAQ,cAEpD,MAAMC,EACXC,wBACE,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BN,EAAkBO,eAChB,CAAEC,SAAU,cACZ,CAACC,EAAKC,KACJ,GAAID,EACFH,EAAOG,OACF,CACL,IAAIE,EAEFA,EADE,iBAAkBD,EACLA,EAAKE,aAEL,IAAIC,OAAOH,EAAKI,aAAc,UACvBC,SAAS,SAGjC,MAAM,SAAEC,EAAQ,SAAEC,EAAQ,KAAEC,EAAI,KAAEC,GAASC,KAAKC,MAAMV,GACtDN,EAAQ,CAAEiB,KAAMN,EAAUC,SAAAA,EAAUC,KAAAA,EAAMC,KAAAA,WAOpDhB,2BAA2BoB,GAMzB,aAAa,mBAAyBA,GAGxCpB,8BACEqB,EACAC,EACAC,GAEA,MAAMC,EAAQC,KAAKC,oBACjBL,EACAC,EACAC,GAGF,OAAO,IAAItB,SAAQ,CAACC,EAASC,KAC3BkB,EAAWG,MAAMA,GAAO,CAAClB,EAAKqB,KACxBrB,GACFsB,QAAQC,IAAIvB,GACZH,EAAOG,IAEPJ,EAAQyB,SAMhB3B,2BAA2BqB,EAAYC,EAAWC,EAAiB,IACjE,IAAIO,EAAUR,EACd,IAAK,MAAMS,KAAQR,EAAgB,CACjC,MAAMS,EAAQX,EAAWY,OAAOV,EAAeQ,IAC/CD,EAAUA,EAAQI,QAAQ,IAAIH,IAAQC,GAGxC,OAAOF,K,uEClEJ,MAAMK,EAAWC,GACf,IAAMA,GAASC,IAAI,Q,QCJ5BC,EAAOC,QAAUC,QAAQ,gB,QCAzBF,EAAOC,QAAUC,QAAQ,iC,QCAzBF,EAAOC,QAAUC,QAAQ,Y,QCAzBF,EAAOC,QAAUC,QAAQ,U,QCAzBF,EAAOC,QAAUC,QAAQ,iCCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,QCpBfG,EAAoBK,EAAKT,IACxB,IAAIU,EAASV,GAAUA,EAAOW,WAC7B,IAAOX,EAAiB,QACxB,IAAM,EAEP,OADAI,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRN,EAAoBQ,EAAI,CAACX,EAASa,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEf,EAASc,IAC5EE,OAAOC,eAAejB,EAASc,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EX,EAAoBY,EAAI,CAACK,EAAK5B,IAAUwB,OAAOK,UAAUC,eAAeC,KAAKH,EAAK5B,GCClFW,EAAoBqB,EAAKxB,IACH,oBAAXyB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAejB,EAASyB,OAAOC,YAAa,CAAEjC,MAAO,WAE7DuB,OAAOC,eAAejB,EAAS,aAAc,CAAEP,OAAO,K,uECDvD,MAiBakC,GAAO,QAjBPC,UACX,MAAM/C,QAAoB,EAAArB,GAAA,iBAC1BwD,OAAOa,OAAOhD,EAAa,CAAEiD,SAAU,aAEvC,MAAMhD,QAAmB,EAAAtB,GAAA,cAAiBqB,GAEpCkD,QAAe,EAAAvE,GAAA,iBACnBsB,EACA,8CACA,IAKF,OAHAO,QAAQC,IAAI,SAAUyC,GAEtBjD,EAAWkD,MACJD,M","sources":["webpack://api-bussines/./src/libs/db.ts","webpack://api-bussines/./src/libs/lambda.ts","webpack://api-bussines/external commonjs \"@middy/core\"","webpack://api-bussines/external commonjs \"@middy/http-json-body-parser\"","webpack://api-bussines/external commonjs \"aws-sdk\"","webpack://api-bussines/external commonjs \"mysql\"","webpack://api-bussines/external commonjs \"source-map-support/register\"","webpack://api-bussines/webpack/bootstrap","webpack://api-bussines/webpack/runtime/compat get default export","webpack://api-bussines/webpack/runtime/define property getters","webpack://api-bussines/webpack/runtime/hasOwnProperty shorthand","webpack://api-bussines/webpack/runtime/make namespace object","webpack://api-bussines/./src/functions/list/handler.ts"],"sourcesContent":["import * as aws from \"aws-sdk\";\nimport * as mysqlDB from \"mysql\";\n\nconst AwsSecretsManager = new aws.SecretsManager({ region: \"us-east-2\" });\n\nexport class DB {\n  static getCredencials(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      AwsSecretsManager.getSecretValue(\n        { SecretId: \"dev/rds/2\" },\n        (err, data: any) => {\n          if (err) {\n            reject(err);\n          } else {\n            let resolve_data;\n            if (\"SecretString\" in data) {\n              resolve_data = data.SecretString;\n            } else {\n              const buffer = new Buffer(data.SecretBinary, \"base64\");\n              resolve_data = buffer.toString(\"ascii\");\n            }\n            //console.log(\"resolve_data\", resolve_data);\n            const { username, password, host, port } = JSON.parse(resolve_data);\n            resolve({ user: username, password, host, port });\n          }\n        }\n      );\n    });\n  }\n\n  static async getConnection(credentials: {\n    user: string;\n    password: string;\n    host: string;\n    database: string;\n  }) {\n    return await mysqlDB.createConnection(credentials);\n  }\n\n  static async executeStatement(\n    connection,\n    statement,\n    bindParameters\n  ): Promise<any> {\n    const query = this.bindQueryParameters(\n      connection,\n      statement,\n      bindParameters\n    );\n\n    return new Promise((resolve, reject) => {\n      connection.query(query, (err, results) => {\n        if (err) {\n          console.log(err);\n          reject(err);\n        } else {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  static bindQueryParameters(connection, statement, bindParameters = {}) {\n    let bindSQL = statement;\n    for (const prop in bindParameters) {\n      const value = connection.escape(bindParameters[prop]);\n      bindSQL = bindSQL.replace(`:${prop}`, value);\n    }\n\n    return bindSQL;\n  }\n}\n","import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n","module.exports = require(\"@middy/core\");","module.exports = require(\"@middy/http-json-body-parser\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"mysql\");","module.exports = require(\"source-map-support/register\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"source-map-support/register\";\nimport { middyfy } from \"@libs/lambda\";\nimport { DB } from \"../../libs/db\";\n\nconst list = async () => {\n  const credentials = await DB.getCredencials();\n  Object.assign(credentials, { database: \"db_citas\" });\n\n  const connection = await DB.getConnection(credentials);\n\n  const result = await DB.executeStatement(\n    connection,\n    \"select idMedico, nombreCompleto from medico\",\n    {}\n  );\n  console.log(\"result\", result);\n\n  connection.end();\n  return result;\n};\n\nexport const main = middyfy(list);\n"],"names":["AwsSecretsManager","region","DB","static","Promise","resolve","reject","getSecretValue","SecretId","err","data","resolve_data","SecretString","Buffer","SecretBinary","toString","username","password","host","port","JSON","parse","user","credentials","connection","statement","bindParameters","query","this","bindQueryParameters","results","console","log","bindSQL","prop","value","escape","replace","middyfy","handler","use","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prototype","hasOwnProperty","call","r","Symbol","toStringTag","main","async","assign","database","result","end"],"sourceRoot":""}